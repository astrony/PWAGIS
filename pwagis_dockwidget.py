# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pwagisDockWidget
                                 A QGIS plugin
 PWA
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-03-15
        git sha              : $Format:%H$
        copyright            : (C) 2024 by PWA
        email                : pwa
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import os.path

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'pwagis_dockwidget_base.ui'))

# Sub Class for Chage department
FORM_CLASS1, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_core/change_department.ui'))

# Sub Class for import image
FORM_CLASS2, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_core/import_Image.ui'))

# Sub Class for delete data
FORM_CLASS3, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_core/confirm_edit.ui'))

# Sub Class for report
FORM_CLASS4, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_core/report.ui'))

# Sub Class for fire feature form Tile
FORM_CLASS5, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_fire_tile.ui'))

# Sub Class for BLDG feature form Tile
FORM_CLASS6, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_meter_tile.ui'))

# Sub Class for DMS feature form Tile
FORM_CLASS7, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_dmaboundaries_tile.ui'))

# Sub Class for DMS feature form Tile
FORM_CLASS8, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_pwawaterworks_tile.ui'))

# Sub Class for DMS feature form Tile
FORM_CLASS9, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_valve_tile.ui'))

FORM_CLASS10, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_pipe_tile.ui'))

FORM_CLASS11, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_bldg_tile.ui'))

FORM_CLASS12, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_leak_tile.ui'))

FORM_CLASS13, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_core/notification.ui'))

FORM_CLASS14, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_struct_tile.ui'))

FORM_CLASS15, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_pipeserve_tile.ui'))

FORM_CLASS16, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_flowmeter_tile.ui'))

FORM_CLASS17, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_form/form_steptest_tile.ui'))

FORM_CLASS18, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui_core/project.ui'))


class pwagisDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(pwagisDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()


class changeDepartmentDialog(QtWidgets.QDialog, FORM_CLASS1):

    def __init__(self, parent=None):
        """Constructor."""
        super(changeDepartmentDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class importImageDialog(QtWidgets.QDialog, FORM_CLASS2):

    def __init__(self, parent=None):
        """Constructor."""
        super(importImageDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class confirmEditDialog(QtWidgets.QDialog, FORM_CLASS3):

    def __init__(self, parent=None):
        """Constructor."""
        super(confirmEditDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class reportDialog(QtWidgets.QDialog, FORM_CLASS4):

    def __init__(self, parent=None):
        """Constructor."""
        super(reportDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class fireDialog(QtWidgets.QDialog, FORM_CLASS5):

    def __init__(self, parent=None):
        """"Constructor."""
        super(fireDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class meterDialog(QtWidgets.QDialog, FORM_CLASS6):

    def __init__(self, parent=None):
        """"Constructor."""
        super(meterDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class dmaDialog(QtWidgets.QDialog, FORM_CLASS7):

    def __init__(self, parent=None):
        """"Constructor."""
        super(dmaDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class pwaWaterworksDialog(QtWidgets.QDialog, FORM_CLASS8):

    def __init__(self, parent=None):
        """"Constructor."""
        super(pwaWaterworksDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class valveDialog(QtWidgets.QDialog, FORM_CLASS9):

    def __init__(self, parent=None):
        """"Constructor."""
        super(valveDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class pipeDialog(QtWidgets.QDialog, FORM_CLASS10):

    def __init__(self, parent=None):
        """"Constructor."""
        super(pipeDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class bldgDialog(QtWidgets.QDialog, FORM_CLASS11):

    def __init__(self, parent=None):
        """"Constructor."""
        super(bldgDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class leakDialog(QtWidgets.QDialog, FORM_CLASS12):

    def __init__(self, parent=None):
        """"Constructor."""
        super(leakDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class notificationDialog(QtWidgets.QDialog, FORM_CLASS13):

    def __init__(self, parent=None):
        """"Constructor."""
        super(notificationDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class structDialog(QtWidgets.QDialog, FORM_CLASS14):

    def __init__(self, parent=None):
        """"Constructor."""
        super(structDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class pipeServeDialog(QtWidgets.QDialog, FORM_CLASS15):

    def __init__(self, parent=None):
        """"Constructor."""
        super(pipeServeDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class flowMeterDialog(QtWidgets.QDialog, FORM_CLASS16):

    def __init__(self, parent=None):
        """"Constructor."""
        super(flowMeterDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class stepTestDialog(QtWidgets.QDialog, FORM_CLASS17):

    def __init__(self, parent=None):
        """"Constructor."""
        super(stepTestDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


class projectDialog(QtWidgets.QDialog, FORM_CLASS18):

    def __init__(self, parent=None):
        """"Constructor."""
        super(projectDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
